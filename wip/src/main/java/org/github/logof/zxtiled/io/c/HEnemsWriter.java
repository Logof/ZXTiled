package org.github.logof.zxtiled.io.c;

import org.github.logof.zxtiled.core.ObjectLayer;
import org.github.logof.zxtiled.core.TileMap;
import org.github.logof.zxtiled.mapeditor.Constants;
import org.github.logof.zxtiled.util.CoordinateUtil;
import java.io.FileWriter;
import java.io.IOException;

public class HEnemsWriter {
    public static void writeEnems(TileMap currentTileMap, String filename) throws IOException {
        FileWriter writer = new FileWriter(filename);
        writeHeader(writer);

        writer.write("typedef struct {" + System.lineSeparator());
        writer.write("	unsigned char x, y;" + System.lineSeparator());
        writer.write("	unsigned char x1, y1, x2, y2;" + System.lineSeparator());
        writer.write("	char mx, my;" + System.lineSeparator());
        writer.write("	char t;" + System.lineSeparator());
        writer.write("#ifdef PLAYER_CAN_FIRE" + System.lineSeparator());
        writer.write("	unsigned char life;" + System.lineSeparator());
        writer.write("#endif" + System.lineSeparator());
        writer.write("} MALOTE;" + System.lineSeparator());
        writer.write(System.lineSeparator());
        writer.write("MALOTE malotes [] = {" + System.lineSeparator());

        enemyToByte(currentTileMap, writer);

        writer.write("};" + System.lineSeparator());

        writer.write("#define N_ENEMS_TYPE_0 0" + System.lineSeparator());
        writer.write("#define N_ENEMS_TYPE_1 0" + System.lineSeparator());
        writer.write("#define N_ENEMS_TYPE_2 0" + System.lineSeparator());
        writer.write("#define N_ENEMS_TYPE_3 0" + System.lineSeparator());
        writer.write("#define N_ENEMS_TYPE_4 0" + System.lineSeparator());
        writer.write("#define N_ENEMS_TYPE_5 0" + System.lineSeparator());
        writer.write("#define N_ENEMS_TYPE_6 0" + System.lineSeparator());
        writer.write("#define N_ENEMS_TYPE_7 0" + System.lineSeparator());

        writer.write("// This is output the way it worked originally, please modify if you need" + System.lineSeparator());
        writer.write("// You may want to add type 5 or 6's below." + System.lineSeparator());
        writer.write("#define BADDIES_COUNT (N_ENEMS_TYPE_1+N_ENEMS_TYPE_2+N_ENEMS_TYPE_3)" + System.lineSeparator());

        writer.write(System.lineSeparator());
        writer.write("typedef struct {" + System.lineSeparator() + "\tunsigned char xy, tipo, act;" + System.lineSeparator() + "} HOTSPOT;");
        writer.write("HOTSPOT hotspots [] = {" + System.lineSeparator());
        hotspotToByte(currentTileMap, writer);
        writer.write("};" + System.lineSeparator());
        writer.write(System.lineSeparator());
        writer.write("#define N_HOTSPOTS_TYPE_0 7" + System.lineSeparator());
        writer.write("#define N_HOTSPOTS_TYPE_1 7" + System.lineSeparator());
        writer.write("#define N_HOTSPOTS_TYPE_2 7" + System.lineSeparator());
        writer.write("#define N_HOTSPOTS_TYPE_3 7" + System.lineSeparator());
        writer.write("#define N_HOTSPOTS_TYPE_4 7" + System.lineSeparator());
        writer.write("#define N_HOTSPOTS_TYPE_5 7" + System.lineSeparator());
        writer.write("#define N_HOTSPOTS_TYPE_6 7" + System.lineSeparator());
        writer.write("#define N_HOTSPOTS_TYPE_7 7" + System.lineSeparator());

        writer.flush();
        writer.close();
    }

    private static void writeHeader(FileWriter writer) throws IOException {
        writer.write("// MTE MK1 (la Churrera) v5.0" + System.lineSeparator());
        writer.write("// Generated by ZXStudio from La Churrera" + System.lineSeparator());
        writer.write("// Copyleft 2024 by Logof" + System.lineSeparator());
    }

    private static void enemyToByte(TileMap tileMap, FileWriter writer) {
        final ObjectLayer objectLayer = tileMap.getObjectLayer();

        objectLayer.getEnemyList().forEach(
                enemy -> {
                    try {
                        writer.write(
                                "\t{" + enemy.getCoordinateXAt() * Constants.TILE_WIDTH + ", " +
                                        enemy.getCoordinateYAt() * Constants.TILE_HEIGHT + ", " +
                                        enemy.getCoordinateXAt() * Constants.TILE_WIDTH + ", " +
                                        enemy.getCoordinateYAt() * Constants.TILE_HEIGHT + ", " +
                                        enemy.getFinalPoint().x * Constants.TILE_WIDTH + ", " +
                                        enemy.getFinalPoint().y * Constants.TILE_HEIGHT + ", " +
                                        "moveX, " +
                                        "moveY, " +
                                        enemy.getType().getObjectId() + "}");
                        writer.write(System.lineSeparator());
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                });
    }

    private static void hotspotToByte(TileMap tileMap, FileWriter writer) {
        final ObjectLayer objectLayer = tileMap.getObjectLayer();

        objectLayer.getHotspotList().forEach(
                enemy -> {
                    try {
                        writer.write(
                                "\t{" +
                                        CoordinateUtil.coordinatesXYToInt(enemy.getCoordinateXAt(), enemy.getCoordinateYAt()) + ", " +
                                        enemy.getType() + ", 0}");
                        writer.write(System.lineSeparator());
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                });
    }
}
