package org.github.logof.zxtiled.io.c;

import org.github.logof.zxtiled.core.ObjectLayer;
import org.github.logof.zxtiled.core.TileMap;
import java.awt.*;
import java.io.FileWriter;
import java.io.IOException;

public class HEnemsWriter {
    public static void writeEnems(TileMap currentTileMap, String filename) throws IOException {
        FileWriter writer = new FileWriter(filename);
        writeHeader(writer);

        writer.write("typedef struct {" + System.lineSeparator());
        writer.write("	unsigned char x, y;" + System.lineSeparator());
        writer.write("	unsigned char x1, y1, x2, y2;" + System.lineSeparator());
        writer.write("	char mx, my;" + System.lineSeparator());
        writer.write("	char t;" + System.lineSeparator());
        writer.write("#ifdef PLAYER_CAN_FIRE" + System.lineSeparator());
        writer.write("	unsigned char life;" + System.lineSeparator());
        writer.write("#endif" + System.lineSeparator());
        writer.write("} MALOTE;" + System.lineSeparator());
        writer.write(System.lineSeparator());
        writer.write("MALOTE malotes [] = {" + System.lineSeparator());


        writer.write("};" + System.lineSeparator());

        writer.flush();
        writer.close();
    }

    private static void writeHeader(FileWriter writer) throws IOException {
        writer.write("// MTE MK1 (la Churrera) v5.0" + System.lineSeparator());
        writer.write("// Generated by ZXStudio from La Churrera" + System.lineSeparator());
        writer.write("// Copyleft 2024 by Logof" + System.lineSeparator());
    }

    private static void enemyToByte(TileMap tileMap, FileWriter writer) throws IOException {
        Rectangle bounds = tileMap.getLayer(0).getBounds();
        final ObjectLayer objectLayer = (ObjectLayer) tileMap.getLayers();

        for (int screenY = 0; screenY < tileMap.getHeight() / 10; screenY++) {
            for (int screenX = 0; screenX < tileMap.getWidth() / 15; screenX++) {
                int result = 0;
                boolean isHighByte = true;

                for (int y = 0; y < 10; y++) {
                    writer.write("\t");
                    for (int x = 0; x < 15; x++) {
                        /*Tile tile = objectLayer.getTileAt(screenX * 15 + x, screenY * 10 + y);

                        if (tile.getId() == 15) {
                            boltMapList.add("\t{ " + (screenY * 15 + screenX) + ", " + x + ", " + y + ", 0 }");
                        }

                        if (isHighByte) {
                            result = tile.getId() * 16;
                        } else {
                            result += tile.getId();
                        }*/
                        writer.write(String.valueOf(result));
                        isHighByte = !isHighByte;

                        if (screenY < (tileMap.getHeight() / 10) - 1 ||
                                screenX < (tileMap.getWidth() / 15) - 1 ||
                                y < 9 || x < 14) {
                            writer.write(",");
                        }
                    }
                    writer.write(System.lineSeparator());
                }
                writer.write(System.lineSeparator());
            }
            writer.write(System.lineSeparator());
        }
    }
}
