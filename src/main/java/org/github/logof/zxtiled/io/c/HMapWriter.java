package org.github.logof.zxtiled.io.c;

import org.github.logof.zxtiled.core.Map;
import org.github.logof.zxtiled.core.Tile;
import org.github.logof.zxtiled.core.TileLayer;
import org.github.logof.zxtiled.core.TileSet;
import org.github.logof.zxtiled.io.MapWriter;
import org.github.logof.zxtiled.io.PluginLogger;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

public class HMapWriter implements MapWriter {
    private final List<String> boltMapList = new ArrayList<>();

    @Override
    public void writeMap(Map map, String filename) throws Exception {
        FileWriter writer = new FileWriter(filename);

        writeHeader(writer);

        writer.write("unsigned char mapa [] = {" + System.lineSeparator());
        mapToByte(map, writer);
        writer.write("};" + System.lineSeparator());

        // We write the array of locks
        writer.write("#define MAX_LOCKS " + boltMapList.size());
        writer.write(" " + System.lineSeparator());
        writer.write("typedef struct {" + System.lineSeparator());
        writer.write("    unsigned char np, x, y, st;" + System.lineSeparator());
        writer.write("} LOCKS;" + System.lineSeparator());
        writer.write(" " + System.lineSeparator());


        if (!boltMapList.isEmpty()) {
            writer.write("LOCKS locks [MAX_LOCKS] = {" + System.lineSeparator());

            for (int i = 0; i < boltMapList.size(); i++) {
                writer.write(boltMapList.get(i));
                if (i < boltMapList.size() - 1) {
                    writer.write(",");
                }
                writer.write(System.lineSeparator());
            }
            writer.write("}" + System.lineSeparator());
        } else {
            writer.write("LOCKS *locks;");
        }

        writer.flush();
        writer.close();
    }

    private void writeHeader(FileWriter writer) throws IOException {
        writer.write("// Mapa.h" + System.lineSeparator());
        writer.write("// Generated by ZXStudio from La Churrera" + System.lineSeparator());
        writer.write("// Copyleft 2024 by Logof" + System.lineSeparator());
    }

    private void mapToByte(Map map, FileWriter writer) throws IOException {
        final TileLayer[] tileLayer = new TileLayer[1];
        map.getListIteratorsLayers().forEachRemaining(layer -> {
            if (layer instanceof TileLayer) {
                tileLayer[0] = (TileLayer) layer;
            }
        });

        for (int screenY = 0; screenY < map.getHeight() / 10; screenY++) {
            for (int screenX = 0; screenX < map.getWidth() / 15; screenX++) {
                int result = 0;
                boolean isHighByte = true;

                for (int y = 0; y < 10; y++) {
                    writer.write("\t");
                    for (int x = 0; x < 15; x++) {
                        Tile tile = tileLayer[0].getTileAt(screenX * 15 + x, screenY * 10 + y);

                        if (tile.getId() == 15) {
                            boltMapList.add("\t{ " + (screenY * 15 + screenX) + ", " + x + ", " + y + ", 0 }");
                        }

                        if (isHighByte) {
                            result = tile.getId() * 16;
                        } else {
                            result += tile.getId();
                        }
                        writer.write(String.valueOf(result));
                        isHighByte = !isHighByte;

                        if (screenY < (map.getHeight() / 10) - 1 ||
                                screenX < (map.getWidth() / 15) - 1 ||
                                y < 9 || x < 14) {
                            writer.write(",");
                        }
                    }
                    writer.write(System.lineSeparator());
                }
                writer.write(System.lineSeparator());
            }
            writer.write(System.lineSeparator());
        }
    }

    @Override
    public void writeTileset(TileSet set, String filename) throws Exception {

    }

    @Override
    public void writeMap(Map map, OutputStream out) throws Exception {

    }

    @Override
    public void writeTileset(TileSet set, OutputStream out) throws Exception {

    }

    @Override
    public boolean accept(File file) {
        return false;
    }

    @Override
    public String getFilter() throws Exception {
        return null;
    }

    @Override
    public String getName() {
        return null;
    }

    @Override
    public String getDescription() {
        return null;
    }

    @Override
    public String getPluginPackage() {
        return null;
    }

    @Override
    public void setLogger(PluginLogger logger) {

    }
}
